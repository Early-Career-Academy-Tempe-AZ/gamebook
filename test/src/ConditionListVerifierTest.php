<?php

namespace rvilbrandt\gamebook;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-05-04 at 10:00:19.
 */
class ConditionListVerifierTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var ConditionListVerifier
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new ConditionListVerifier;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }
    
    public function runProvider() {

        $key = new \stdClass();
        $key->id = "key";
        $key->name = "A key";
        $key->description = "not empty";
        
        $item1 = new Model\Inventory\Item();
        $item1->setFromObject($key);
        
        $conditions1 = new Model\Gamebook\Conditions();
        $conditions1->inventory->has[] = "key";
        $conditions1->inventory->hasNot[] = "mofa";
        
        $inventory1 = new Model\Inventory();
        $inventory1->addItem("key", $item1);
        
        $stateList1 = new Model\StateList();

        $conditions2 = new Model\Gamebook\Conditions();
        $conditions2->states->eq['has_taken'] = 1;
        $conditions2->states->gt['has_taken'] = 0;
        $conditions2->states->lt['has_taken'] = 2;
        $conditions2->states->ne['has_taken'] = 10;
        
        $inventory2 = new Model\Inventory();
        
        $stateList2 = new Model\StateList();
        $stateList2->setState("has_taken", 1);
        
        return array(
            
            array(
                
                $conditions1,
                $inventory1,
                $stateList1
                
            ),
            
            array(
                
                $conditions2,
                $inventory2,
                $stateList2
                
            )
            
        );
    }
    

    /**
     * @covers rvilbrandt\gamebook\ConditionListVerifier::setConditions
     */
    public function testSetConditions() {
        $this->assertNull($this->object->setConditions(new Model\Gamebook\Conditions()));
    }

    /**
     * @covers rvilbrandt\gamebook\ConditionListVerifier::setInventory
     */
    public function testSetInventory() {
        $this->assertNull($this->object->setInventory(new Model\Inventory()));
    }

    /**
     * @covers rvilbrandt\gamebook\ConditionListVerifier::setStateList
     */
    public function testSetStateList() {
        $this->assertNull($this->object->setStateList(new Model\StateList()));
    }

    /**
     * @covers rvilbrandt\gamebook\ConditionListVerifier::run
     * @dataProvider runProvider
     */
    public function testRun($conditions, $inventory, $stateList) {
        
        $this->object->setConditions($conditions);
        $this->object->setInventory($inventory);
        $this->object->setStateList($stateList);    
        
        $this->assertTrue($this->object->run());
    }

}
